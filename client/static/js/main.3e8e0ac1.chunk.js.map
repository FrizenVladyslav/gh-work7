{"version":3,"sources":["containers/App/styles.module.scss","components/Header/styles.module.scss","components/Footer/index.tsx","components/Header/index.tsx","utils/history.ts","config.ts","actions/user.ts","containers/Admin/Users/Modal/index.tsx","containers/Admin/Users/index.tsx","containers/Admin/index.tsx","serviceWorker.ts","index.tsx","containers/App/index.tsx"],"names":["module","exports","Footer","Header","className","styles","header","to","type","icon","createBrowserHistory","api","axios","create","baseURL","process","prefix","addUser","user","a","async","post","res","data","getUsers","get","setUser","id","patch","deleteUser","delete","UsersModal","edit","open","onClose","loadUsers","useState","changeUser","target","name","value","_id","title","visible","onOk","closeMessage","message","loading","content","userActions","notification","error","success","onCancel","Item","style","color","placeholder","firstName","onChange","lastName","email","Users","state","modal","changeModal","setState","loadData","users","this","onClick","dataSource","renderItem","key","actions","Meta","fullName","description","Modal","Component","Admin","path","component","Boolean","window","location","hostname","match","ReactDOM","render","history","layout","Content","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e8e0ac1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"styles_layout__SeFd3\",\"content\":\"styles_content__o67Yr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__2dQfB\"};","import React from 'react'\nimport { Layout } from 'antd'\n\nconst Footer: React.FC = () => <Layout.Footer>Geekhub</Layout.Footer>\n\nexport default Footer\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Layout, Icon, Button } from 'antd'\n\nimport styles from './styles.module.scss'\n\nconst Header: React.FC = () => {\n  return (\n    <Layout.Header className={styles.header}>\n      <Link to=\"/\">\n        <Icon type=\"file-image\" /> GeekHub\n      </Link>\n      <Link to=\"/admin/users\">\n        <Button type=\"primary\" icon=\"info-circle\">\n          Users\n        </Button>\n      </Link>\n    </Layout.Header>\n  )\n}\n\nexport default Header\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import axios from 'axios'\n\nexport const host = process.env.REACT_APP_HOST\n\nexport const api = axios.create({\n  baseURL: host,\n})\n","import { api } from 'config'\nimport { IUser } from 'models/user'\n\nconst prefix = '/user'\n\nexport async function addUser(user: Partial<IUser>): Promise<IUser> {\n  const res = await api.post(prefix, user)\n  return res.data\n}\n\nexport async function getUsers(): Promise<IUser[]> {\n  const res = await api.get(prefix)\n  return res.data\n}\n\nexport async function getUser(id: IUser['_id']) {\n  const res = await api.get(`${prefix}/${id}`)\n  return res.data\n}\n\nexport async function setUser(id: IUser['_id'], user: Partial<IUser>) {\n  const res = await api.patch(`${prefix}/${id}`, user)\n  return res.data\n}\n\nexport async function deleteUser(id: IUser['_id']) {\n  const res = await api.delete(`${prefix}/${id}`)\n  return res.data\n}\n","import React, { useState } from 'react'\nimport { Modal, Form, Input, Icon, notification, message } from 'antd'\nimport * as userActions from 'actions/user'\nimport { IUser } from 'models/user'\n\ninterface IProps {\n  open?: boolean\n  edit?: IUser\n  loadUsers: () => void\n  onClose: () => void\n}\n\nconst UsersModal: React.FC<IProps> = ({ edit, open, onClose, loadUsers }) => {\n  const [user, setUser] = useState<Partial<IUser>>(edit || {})\n\n  if (edit && edit._id !== user._id) setUser(edit)\n  if (!edit && user._id) setUser({})\n\n  function changeUser({ target: { name, value } }: React.ChangeEvent<HTMLInputElement>) {\n    setUser({ ...user, [name]: value })\n  }\n\n  async function handleSubmit() {\n    const closeMessage = message.loading({ content: 'Loading...' })\n    try {\n      edit ? await userActions.setUser(edit._id, user) : await userActions.addUser(user)\n      await loadUsers()\n      onClose()\n    } catch (e) {\n      notification.error({ message: e.message || e })\n    } finally {\n      closeMessage()\n      message.success('Success!')\n    }\n  }\n\n  return (\n    <Modal\n      title={(edit ? 'update ' : 'craete ') + 'user'}\n      visible={open}\n      onOk={handleSubmit}\n      onCancel={onClose}\n    >\n      <Form>\n        <Form.Item>\n          <Input\n            name=\"firstName\"\n            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            placeholder=\"First name\"\n            value={user.firstName}\n            onChange={changeUser}\n          />\n          <Input\n            name=\"lastName\"\n            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            placeholder=\"Last name\"\n            value={user.lastName}\n            onChange={changeUser}\n          />\n          <Input\n            name=\"email\"\n            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            placeholder=\"email\"\n            value={user.email}\n            onChange={changeUser}\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default UsersModal\n","import React, { Component } from 'react'\nimport { List, notification, Spin, Button, Icon, message } from 'antd'\nimport Modal from './Modal'\nimport * as userActions from 'actions/user'\nimport { IUser } from 'models/user'\n\ninterface IState {\n  users?: IUser[]\n  loading: boolean\n  modal: {\n    open: boolean\n    user?: IUser\n  }\n}\n\nclass Users extends Component<{}, IState> {\n  state: IState = {\n    loading: true,\n    modal: { open: false },\n  }\n\n  componentDidMount() {\n    this.loadData()\n  }\n\n  changeModal = (user?: IUser) => {\n    const { open } = this.state.modal\n    this.setState({ modal: { open: !open, user } })\n  }\n\n  deleteUser = async (id: IUser['_id']) => {\n    try {\n      await userActions.deleteUser(id)\n      this.loadData()\n    } catch (e) {\n      notification.error({ message: e.message })\n    }\n  }\n\n  loadData = async () => {\n    const closeMessage = message.loading({ content: 'Loading...' })\n    try {\n      const users = await userActions.getUsers()\n      this.setState({ users, loading: false })\n    } catch (e) {\n      notification.error({ message: e.message || e })\n    } finally {\n      closeMessage()\n    }\n  }\n\n  render() {\n    const { users, modal } = this.state\n\n    return (\n      <div>\n        <Button icon=\"plus\" type=\"primary\" onClick={() => this.changeModal()}>\n          Add User\n        </Button>\n        <List\n          dataSource={users}\n          renderItem={user => (\n            <List.Item\n              key={user._id}\n              actions={[\n                <Icon type=\"edit\" onClick={() => this.changeModal(user)} />,\n                <Icon type=\"delete\" onClick={() => this.deleteUser(user._id)} />,\n              ]}\n            >\n              <List.Item.Meta title={<p>{user.fullName}</p>} description={user.email} />\n            </List.Item>\n          )}\n        >\n          {this.state.loading && <Spin />}\n        </List>\n        <Modal\n          loadUsers={this.loadData}\n          open={modal.open}\n          edit={modal.user}\n          onClose={() => this.changeModal()}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Users\n","import React from 'react'\nimport { Switch, Route } from 'react-router'\nimport Users from './Users'\n\nconst Admin: React.FC = () => {\n  return (\n    <Switch>\n      <Route path=\"/admin/users\" component={Users} />\n    </Switch>\n  )\n}\n\nexport default Admin\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\nimport 'antd/dist/antd.css'\nimport 'sources/styles/styles.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport { Switch, Route, Router, Redirect } from 'react-router'\nimport { Layout } from 'antd'\nimport { Header, Footer } from 'components'\nimport history from 'utils/history'\nimport Admin from '../Admin'\n\nimport styles from './styles.module.scss'\n\nexport default function Public(): React.ReactElement {\n  return (\n    <Router history={history}>\n      <Layout className={styles.layout}>\n        <Header />\n        <Layout.Content className={styles.content}>\n          <Switch>\n            <Route path=\"/admin\" component={Admin} />\n            <Redirect to=\"/admin\" />\n          </Switch>\n        </Layout.Content>\n        <Footer />\n      </Layout>\n    </Router>\n  )\n}\n"],"sourceRoot":""}